/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as AdminrouteImport } from './routes/_adminroute'
import { Route as AuthenticateRouteImport } from './routes/authenticate/route'
import { Route as ProtectedProfileImport } from './routes/_protected/profile'
import { Route as AdminrouteMainImport } from './routes/_adminroute/main'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const AdminrouteRoute = AdminrouteImport.update({
  id: '/_adminroute',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticateRouteRoute = AuthenticateRouteImport.update({
  path: '/authenticate',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProtectedProfileRoute = ProtectedProfileImport.update({
  path: '/profile',
  getParentRoute: () => ProtectedRoute,
} as any)

const AdminrouteMainRoute = AdminrouteMainImport.update({
  path: '/main',
  getParentRoute: () => AdminrouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/authenticate': {
      id: '/authenticate'
      path: '/authenticate'
      fullPath: '/authenticate'
      preLoaderRoute: typeof AuthenticateRouteImport
      parentRoute: typeof rootRoute
    }
    '/_adminroute': {
      id: '/_adminroute'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminrouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/_adminroute/main': {
      id: '/_adminroute/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof AdminrouteMainImport
      parentRoute: typeof AdminrouteImport
    }
    '/_protected/profile': {
      id: '/_protected/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProtectedProfileImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface AdminrouteRouteChildren {
  AdminrouteMainRoute: typeof AdminrouteMainRoute
}

const AdminrouteRouteChildren: AdminrouteRouteChildren = {
  AdminrouteMainRoute: AdminrouteMainRoute,
}

const AdminrouteRouteWithChildren = AdminrouteRoute._addFileChildren(
  AdminrouteRouteChildren,
)

interface ProtectedRouteChildren {
  ProtectedProfileRoute: typeof ProtectedProfileRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedProfileRoute: ProtectedProfileRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/authenticate': typeof AuthenticateRouteRoute
  '': typeof ProtectedRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/main': typeof AdminrouteMainRoute
  '/profile': typeof ProtectedProfileRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/authenticate': typeof AuthenticateRouteRoute
  '': typeof ProtectedRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/main': typeof AdminrouteMainRoute
  '/profile': typeof ProtectedProfileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/authenticate': typeof AuthenticateRouteRoute
  '/_adminroute': typeof AdminrouteRouteWithChildren
  '/_protected': typeof ProtectedRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/_adminroute/main': typeof AdminrouteMainRoute
  '/_protected/profile': typeof ProtectedProfileRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/authenticate' | '' | '/about' | '/main' | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/authenticate' | '' | '/about' | '/main' | '/profile'
  id:
    | '__root__'
    | '/'
    | '/authenticate'
    | '/_adminroute'
    | '/_protected'
    | '/about'
    | '/_adminroute/main'
    | '/_protected/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthenticateRouteRoute: typeof AuthenticateRouteRoute
  AdminrouteRoute: typeof AdminrouteRouteWithChildren
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AboutLazyRoute: typeof AboutLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthenticateRouteRoute: AuthenticateRouteRoute,
  AdminrouteRoute: AdminrouteRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
  AboutLazyRoute: AboutLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/authenticate",
        "/_adminroute",
        "/_protected",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/authenticate": {
      "filePath": "authenticate/route.tsx"
    },
    "/_adminroute": {
      "filePath": "_adminroute.tsx",
      "children": [
        "/_adminroute/main"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/profile"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/_adminroute/main": {
      "filePath": "_adminroute/main.tsx",
      "parent": "/_adminroute"
    },
    "/_protected/profile": {
      "filePath": "_protected/profile.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
